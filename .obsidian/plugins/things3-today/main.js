/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  ThingsView: () => ThingsView,
  VIEW_TYPE_THINGS3: () => VIEW_TYPE_THINGS3,
  default: () => ObsidianThings3
});
module.exports = __toCommonJS(main_exports);
var import_child_process = require("child_process");
var import_obsidian = require("obsidian");
var VIEW_TYPE_THINGS3 = "things3-today";
var ObsidianThings3 = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "open-today",
      name: "Open Today",
      callback: () => {
        this.activateThings3View();
      }
    });
    this.registerView(
      VIEW_TYPE_THINGS3,
      (leaf) => new ThingsView(leaf, this.manifest)
    );
    this.addRibbonIcon("check-square", "Open Things3 Today", () => {
      this.activateThings3View();
    });
    this.app.workspace.onLayoutReady(this.activateThings3View.bind(this));
  }
  async activateThings3View() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_THINGS3);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      await leaf.setViewState({ type: VIEW_TYPE_THINGS3, active: true });
    }
    workspace.revealLeaf(leaf);
  }
};
var ThingsView = class extends import_obsidian.ItemView {
  constructor(leaf, manifest) {
    super(leaf);
    this.manifest = manifest;
  }
  getIcon() {
    return "check-square";
  }
  getViewType() {
    return VIEW_TYPE_THINGS3;
  }
  getDisplayText() {
    return "Things3 Today";
  }
  async onOpen() {
    this.refreshTodayView(0);
    this.intervalValue = setInterval(() => {
      this.refreshTodayView(0);
    }, 1e3 * 30);
  }
  async onClose() {
    clearInterval(this.intervalValue);
    clearTimeout(this.refreshTimer);
  }
  async getAndShowTodayTodos() {
    const container = this.containerEl.children[1];
    const rawHtml = await this.getTodayListByJXA();
    const parser = new DOMParser();
    const doc = parser.parseFromString(rawHtml, "text/html");
    const node = doc.documentElement;
    container.empty();
    container.createEl("h4", { text: "Things3 Today" });
    container.createEl("a", { href: "things:///show?id=today", text: "Open Today" });
    container.createEl("br");
    container.createEl("br");
    const button = document.createElement("button");
    button.innerText = "Refresh";
    button.addEventListener("click", () => {
      this.refreshTodayView(0, true);
    });
    container.appendChild(button);
    const inputCheckboxes = node.querySelectorAll(".things-today-checkbox");
    inputCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener("click", this.handleCheckboxClick.bind(this));
    });
    while (node.children[1].children.length > 0) {
      container.appendChild(node.children[1].children[0]);
    }
  }
  async handleCheckboxClick(event) {
    var _a, _b;
    const clickedCheckbox = event.target;
    const todoId = ((_a = clickedCheckbox.attributes.getNamedItem("tid")) == null ? void 0 : _a.value) || "";
    await this.completeTodoByJXA(todoId);
    (_b = clickedCheckbox.parentNode) == null ? void 0 : _b.detach();
    this.refreshTodayView(3e3);
  }
  refreshTodayView(delay, notice = false) {
    clearTimeout(this.refreshTimer);
    this.refreshTimer = setTimeout(() => {
      this.getAndShowTodayTodos();
      if (notice) {
        new import_obsidian.Notice("Today Refreshed");
      }
    }, delay);
  }
  getTodayListByJXA() {
    const getTodayListSct = `"function getTodayList() { let content = ''; Application('Things').lists.byId('TMTodayListSource').toDos().forEach(t => { content += '<ul><input type="checkbox" class="things-today-checkbox" tid=\\"' + t.id() + '\\"><div style="display:contents"><a href=\\"things:///show?id=' + t.id() + '\\">' + t.name() + '</a></div></ul>'; }); return content; }; getTodayList();"`;
    return new Promise((resolve) => {
      (0, import_child_process.exec)(`osascript -l JavaScript -e ` + getTodayListSct, (err, stdout, stderr) => {
        resolve(stdout);
      });
    });
  }
  completeTodoByJXA(todoId) {
    const completeSct = `"Application('Things').toDos.byId('` + todoId + `').status = 'completed'"`;
    return new Promise((resolve) => {
      (0, import_child_process.exec)(`osascript -l JavaScript -e ` + completeSct, (err, stdout, stderr) => {
        resolve(stdout);
      });
    });
  }
};
